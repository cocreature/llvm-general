name: llvm-general
version: 3.8.0.0
license: BSD3
license-file: LICENSE
author: Benjamin S.Scarlet <fgthb0@greynode.net>
maintainer: Benjamin S. Scarlet <fgthb0@greynode.net>
copyright: (c) 2013 Benjamin S. Scarlet and Google Inc.
homepage: http://github.com/bscarlet/llvm-general/
bug-reports: http://github.com/bscarlet/llvm-general/issues
build-type: Custom
stability: experimental
cabal-version: >= 1.8
category: Compilers/Interpreters, Code Generation
synopsis: General purpose LLVM bindings
description:
  llvm-general is a set of Haskell bindings for LLVM <http://llvm.org/>. Unlike other current Haskell bindings,
  it uses an ADT to represent LLVM IR (<http://llvm.org/docs/LangRef.html>), and so offers two advantages: it
  handles almost all of the stateful complexities of using the LLVM API to build IR; and it supports moving IR not
  only from Haskell into LLVM C++ objects, but the other direction - from LLVM C++ into Haskell.
extra-source-files:
tested-with: GHC == 7.8.4, GHC == 7.10.3, GHC == 8.0.1

source-repository head
  type: git
  location: git://github.com/bscarlet/llvm-general.git

source-repository this
  type: git
  location: git://github.com/bscarlet/llvm-general.git
  branch: llvm-3.8
  tag: v3.8.0.0

flag shared-llvm
  description: link against llvm shared rather than static library
  default: False

flag debug
  description: compile C(++) shims with debug info for ease of troubleshooting
  default: False

custom-setup
  setup-depends: base
               , Cabal
               , containers

library
  ghc-options: -fwarn-unused-imports
  build-depends:
    base >= 4.7 && < 5,
    utf8-string >= 0.3.7,
    bytestring >= 0.9.1.10,
    transformers >= 0.3 && < 0.6,
    transformers-compat >= 0.4,
    mtl >= 2.1.3,
    template-haskell >= 2.5.0.0,
    containers >= 0.4.2.1,
    parsec >= 3.1.3,
    array >= 0.4.0.0
  hs-source-dirs: src
  extensions:
    TupleSections
    DeriveDataTypeable
    EmptyDataDecls
    FlexibleContexts
    FlexibleInstances
    StandaloneDeriving
    ConstraintKinds
  exposed-modules:
    LLVM.General.Target.Options
    LLVM.General.Transforms

  other-modules:
    Control.Monad.AnyCont
    Control.Monad.AnyCont.Class
    Control.Monad.Trans.AnyCont
    LLVM.General.Internal.Coding
    LLVM.General.Internal.Context
    LLVM.General.Internal.Inject
    LLVM.General.Internal.LibraryFunction
    LLVM.General.Internal.MemoryBuffer
    LLVM.General.Internal.Module
    LLVM.General.Internal.PassManager
    LLVM.General.Internal.String
    LLVM.General.Internal.Target
    LLVM.General.Internal.FFI.Cleanup
    LLVM.General.Internal.FFI.Context
    LLVM.General.Internal.FFI.DataLayout
    LLVM.General.Internal.FFI.LLVMCTypes
    LLVM.General.Internal.FFI.Module
    LLVM.General.Internal.FFI.PassManager
    LLVM.General.Internal.FFI.RawOStream
    LLVM.General.Internal.FFI.Target
    LLVM.General.Internal.FFI.Transforms

  include-dirs: src
  c-sources:
    src/LLVM/General/Internal/FFI/PassManagerC.c
    src/LLVM/General/Internal/FFI/TargetC.c

  if flag(debug)
    cc-options: -g
